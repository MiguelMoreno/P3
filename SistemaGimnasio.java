// Práctica 3 DDSI 3ºA-3 Grupo4
/* Por:
Miguel Moreno Murcia
Santiago Romero Alonso
Alberto García Lara
Miguel Álvarez de Cienfuegos Cortés
*/

import java.sql.*;
import java.util.Scanner;

public class SistemaGimnasio {

    /*****************************************************************************************************/
    /* CONEXION CON LA BASE DE DATOS */
    /*****************************************************************************************************/

    // Clase para manejar la conexión con el SGBD
    private static class DatabaseConnection {
        private static final String URL = "jdbc:oracle:thin:@//oracle0.ugr.es:1521/practbd";
        private static final String USER = "x8124805";
        private static final String PASSWORD = "x8124805";

        public static Connection connect() throws SQLException {
            Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
            conn.setAutoCommit(false); // Para manejar las transacciones manualmente
            return conn;
        }

        public static void disconnect(Connection conn) {
            try {
                if (conn != null && !conn.isClosed()) {
                    conn.close();
                    System.out.println("Conexión cerrada correctamente.");
                }
            } catch (SQLException e) {
                System.err.println("Error al cerrar la conexión: " + e.getMessage());
            }
        }
    }

    /*****************************************************************************************************/
    /* AVISO LEGAL DE PROTECCION DE DATOS */
    /*****************************************************************************************************/

	// Mostrar mensaje de protección de datos
    private static void mostrarAvisoLegal() {
        System.out.println("\n*** Aviso Legal ***");
        System.out.println("Este sistema almacena datos personales de empleados, clientes y productos.");
        System.out.println("Todos los datos se manejan de acuerdo con la legislación vigente sobre protección de datos.");
        System.out.println("*******************\n");
    }

    /*****************************************************************************************************/
    /* MANEJO DE ERRORES */
    /*****************************************************************************************************/

	private static void manejarSQLException(SQLException e) {
		if (e.getErrorCode() == 955) {
		    System.out.println("La tabla ya existe, no se ha creado nuevamente.");
		} else {
		    System.err.println("Error de SQL: " + e.getMessage());
		}
	}

    /*****************************************************************************************************/
    /* CREACION DE TABLAS */
    /*****************************************************************************************************/


/* PONER BOOLEANO PARA ELIMINAR: SI 1 ELIMINADO, SI 0 ACTIVO
 * CUANDO SELECIONAR FILTRAR PARA POR ELIMINADO = 0
  */
    private static void crearTablas(Connection conn) throws SQLException {
        Statement stmt = conn.createStatement();

        // Crear tabla Producto
        try {
            stmt.executeUpdate("CREATE TABLE Producto (" +
                    "ID_Producto INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                    "Stock INT NOT NULL CHECK (Stock >= 0), " +
                    "Nombre VARCHAR2(100) NOT NULL, " +
                    "Eliminado INT DEFAULT 0 NOT NULL, " +
                    "Proveedor VARCHAR2(100))");
        } catch (SQLException e) {
            //manejarSQLException(e);
        }

        // Crear tabla Cliente_Invitado
        try {
            stmt.executeUpdate("CREATE TABLE Cliente_Invitado (" +
                    "ID_Cliente_Invitado INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                    "Eliminado INT DEFAULT 0 NOT NULL, " +
                    "Nombre VARCHAR2(100) NOT NULL)");
        } catch (SQLException e) {
            //manejarSQLException(e);
        }

        // Crear tabla Empleado
        try {
            stmt.executeUpdate("CREATE TABLE Empleado (" +
                    "ID_Empleado INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                    "Nombre VARCHAR2(100) NOT NULL, " +
                    "Correo_Electronico VARCHAR2(100) UNIQUE NOT NULL, " +
                    "Eliminado INT DEFAULT 0 NOT NULL, " +
                    "Rol VARCHAR2(50) CHECK (Rol IN ('Administrador', 'Entrenador')) NOT NULL)");
        } catch (SQLException e) {
            //manejarSQLException(e);
        }

        // Crear tabla Administrador
        try {
            stmt.executeUpdate("CREATE TABLE Administrador (" +
                    "ID_Administrador INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                    "ID_Empleado INT NOT NULL, " +
                    "Eliminado INT DEFAULT 0 NOT NULL, " +
                    "FOREIGN KEY (ID_Empleado) REFERENCES Empleado(ID_Empleado) ON DELETE CASCADE)");
        } catch (SQLException e) {
            //manejarSQLException(e);
        }

        // Crear tabla Entrenador
        try {
            stmt.executeUpdate("CREATE TABLE Entrenador (" +
                    "ID_Entrenador INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                    "ID_Empleado INT NOT NULL, " +
                    "Eliminado INT DEFAULT 0 NOT NULL, " +
                    "FOREIGN KEY (ID_Empleado) REFERENCES Empleado(ID_Empleado) ON DELETE CASCADE)");
        } catch (SQLException e) {
            //manejarSQLException(e);
        }

        // Crear tabla Escoge_Actividad
        try {
            stmt.executeUpdate("CREATE TABLE Escoge_Actividad (" +
                    "ID_Entrenador INT NOT NULL, " +
                    "ID_Actividad INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                    "Fecha_Ini DATE NOT NULL, " +
                    "Fecha_Fin DATE NOT NULL, " +
                    "Nombre VARCHAR2(100) NOT NULL, " +
                    "Descripcion VARCHAR2(500), " +
                    "Eliminado INT DEFAULT 0 NOT NULL, " +
                    "FOREIGN KEY (ID_Entrenador) REFERENCES Entrenador(ID_Entrenador) ON DELETE CASCADE)");
        } catch (SQLException e) {
            //manejarSQLException(e);
        }

        // Crear tabla ClienteIncluyeSuscripcion_Invitacion
        try {
            stmt.executeUpdate("CREATE TABLE ClienteIncluyeSuscripcion_Invitacion (" +
                    "ID_Cliente INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                    "ID_Suscripcion INT NOT NULL, " +
                    "ID_Cliente_Invitado INT, " +
                    "Fecha DATE NOT NULL, " +
                    "Codigo VARCHAR2(20) UNIQUE NOT NULL, " +
                    "Eliminado INT DEFAULT 0 NOT NULL, " +
                    "FOREIGN KEY (ID_Cliente_Invitado) REFERENCES Cliente_Invitado(ID_Cliente_Invitado) ON DELETE SET NULL)");
        } catch (SQLException e) {
            //manejarSQLException(e);
        }

        // Crear tabla Inscribe_en_Actividad
        try {
            stmt.executeUpdate("CREATE TABLE Inscribe_en_Actividad (" +
                    "ID_Actividad INT NOT NULL, " +
                    "ID_Cliente INT NOT NULL, " +
                    "PRIMARY KEY (ID_Actividad, ID_Cliente), " +
                    "FOREIGN KEY (ID_Actividad) REFERENCES Escoge_Actividad(ID_Actividad) ON DELETE CASCADE, " +
                    "Eliminado INT DEFAULT 0 NOT NULL, " +
                    "FOREIGN KEY (ID_Cliente) REFERENCES ClienteIncluyeSuscripcion_Invitacion(ID_Cliente) ON DELETE CASCADE)");
        } catch (SQLException e) {
            //manejarSQLException(e);
        }

        // Crear tabla Comprar
        try {
            stmt.executeUpdate("CREATE TABLE Comprar (" +
                    "ID_Venta INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                    "ID_Producto INT NOT NULL, " +
                    "ID_Cliente INT NOT NULL, " +
                    "Total_Venta NUMBER(10, 2) NOT NULL CHECK (Total_Venta > 0), " +
                    "Cantidad_Venta INT NOT NULL CHECK (Cantidad_Venta > 0), " +
                    "Fecha DATE NOT NULL, " +
                    "FOREIGN KEY (ID_Producto) REFERENCES Producto(ID_Producto) ON DELETE CASCADE, " +
                    "Eliminado INT DEFAULT 0 NOT NULL, " +
                    "FOREIGN KEY (ID_Cliente) REFERENCES ClienteIncluyeSuscripcion_Invitacion(ID_Cliente) ON DELETE CASCADE)");
        } catch (SQLException e) {
            //manejarSQLException(e);
        }

        // Crear tabla Notifica_Incidencia
        try {
            stmt.executeUpdate("CREATE TABLE Notifica_Incidencia (" +
                    "ID_Incidencia INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                    "ID_Administrador INT NOT NULL, " +
                    "ID_Empleado INT NOT NULL, " +
                    "Fecha DATE NOT NULL, " +
                    "Descripcion VARCHAR2(500) NOT NULL, " +
                    "FOREIGN KEY (ID_Administrador) REFERENCES Administrador(ID_Administrador) ON DELETE CASCADE, " +
                    "Eliminado INT DEFAULT 0 NOT NULL, " +
                    "FOREIGN KEY (ID_Empleado) REFERENCES Empleado(ID_Empleado) ON DELETE CASCADE)");
        } catch (SQLException e) {
            //manejarSQLException(e);
        }

        // Crear tabla TieneRutina
        try {
            stmt.executeUpdate("CREATE TABLE TieneRutina (" +
                    "ID_Rutina INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                    "ID_Cliente INT NOT NULL, " +
                    "Ejercicios VARCHAR2(1000), " +
                    "Duracion VARCHAR2(50), " +
                    "Descripcion VARCHAR2(500), " +
                    "Eliminado INT DEFAULT 0 NOT NULL, " +
                    "FOREIGN KEY (ID_Cliente) REFERENCES ClienteIncluyeSuscripcion_Invitacion(ID_Cliente) ON DELETE CASCADE)");
        } catch (SQLException e) {
            //manejarSQLException(e);
        }

        // Crear tabla Oferta_Aplicar
    try {
        stmt.executeUpdate("CREATE TABLE Oferta_Aplicar (" +
                "ID_Cliente INT NOT NULL, " + // Cambiar de ID_Suscripcion a ID_Cliente
                "ID_Oferta INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                "Nombre VARCHAR2(100) NOT NULL, " +
                "Descuento NUMBER(5, 2) CHECK (Descuento > 0), " +
                "Duracion VARCHAR2(50), " +
                "Eliminado INT DEFAULT 0 NOT NULL, " +
                "FOREIGN KEY (ID_Cliente) REFERENCES ClienteIncluyeSuscripcion_Invitacion(ID_Cliente) ON DELETE CASCADE)");
        } catch (SQLException e) {
            //manejarSQLException(e);
        }
            System.out.println("Tablas creadas o ya existentes.");
            stmt.close();
    }    

    /*****************************************************************************************************/
    /* MENU PRINCIPAL */
    /*****************************************************************************************************/

        // Menú principal
    public static void main(String[] args) {
        Connection conn = null;
        Scanner scanner = new Scanner(System.in);

        try {
            conn = DatabaseConnection.connect();
            mostrarAvisoLegal();
            crearTablas(conn);

            boolean salir = false;

            while (!salir) {
                System.out.println("\nMenú Principal:");
                System.out.println("1. Gestión de Empleados");
                System.out.println("2. Gestión de Clientes");
                System.out.println("3. Gestión de Actividades");
                System.out.println("4. Gestión de Tienda");
                System.out.println("5. Salir");
                System.out.print("Elige una opción: ");

                int opcion = scanner.nextInt();
                scanner.nextLine(); // Consumir el salto de línea

                switch (opcion) {
                    case 1:
                        System.out.println("Gestión de Empleados seleccionado.");
                        // Implementar funcionalidad
                        // Llamar a la clase GestionEmpleados para gestionar empleados
                        GestionEmpleados.mostrarMenuGestionEmpleados(conn, scanner);
                        break;
                    case 2:
                        System.out.println("Gestión de Clientes seleccionado.");
                        // Implementar funcionalidad
                        System.out.println("Gestión de Clientes no implementada en esta versión.");
                        break;
                    case 3:
                        System.out.println("Gestión de Actividades seleccionado.");
                        // Implementar funcionalidad
                        System.out.println("Gestión de Actividades no implementada en esta versión.");
                        break;
                    case 4:
                        System.out.println("Gestión de Tienda seleccionado.");
                        // Implementar funcionalidad
                        System.out.println("Gestión de Tienda no implementada en esta versión.");
                        break;
                    case 5:
                        System.out.println("Saliendo del sistema...");
                        salir = true;
                        break;
                    default:
                        System.out.println("Opción no válida. Por favor, intenta de nuevo.");
                }
            }
        } catch (SQLException e) {
            System.err.println("Error al interactuar con la base de datos: " + e.getMessage());
        } finally {
            DatabaseConnection.disconnect(conn);
            if (conn != null) {
                DatabaseConnection.disconnect(conn);
            }
            scanner.close();
        }
    }
}
